{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "211ede62",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:22.073934Z",
     "iopub.status.busy": "2025-07-26T16:32:22.073642Z",
     "iopub.status.idle": "2025-07-26T16:32:23.095510Z",
     "shell.execute_reply": "2025-07-26T16:32:23.094752Z"
    },
    "papermill": {
     "duration": 1.028215,
     "end_time": "2025-07-26T16:32:23.097077",
     "exception": false,
     "start_time": "2025-07-26T16:32:22.068862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8546b97c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.105129Z",
     "iopub.status.busy": "2025-07-26T16:32:23.104780Z",
     "iopub.status.idle": "2025-07-26T16:32:23.151590Z",
     "shell.execute_reply": "2025-07-26T16:32:23.150637Z"
    },
    "papermill": {
     "duration": 0.052078,
     "end_time": "2025-07-26T16:32:23.152980",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.100902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot',\n",
       "       'floors', 'waterfront', 'view', 'condition', 'sqft_above',\n",
       "       'sqft_basement', 'yr_built', 'yr_renovated', 'street', 'city',\n",
       "       'statezip', 'country'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import the dataset\n",
    "df = pd.read_csv(r'/kaggle/input/house-prediction-project1/data.csv')\n",
    "df.head()\n",
    "df.shape\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b549b660",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.160483Z",
     "iopub.status.busy": "2025-07-26T16:32:23.160229Z",
     "iopub.status.idle": "2025-07-26T16:32:23.175366Z",
     "shell.execute_reply": "2025-07-26T16:32:23.174445Z"
    },
    "papermill": {
     "duration": 0.020188,
     "end_time": "2025-07-26T16:32:23.176627",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.156439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# remove unnecessary columns\n",
    "columns_to_remove = ['date',\n",
    "     'waterfront', 'condition', 'sqft_basement', 'yr_built', 'yr_renovated', 'street', 'city',\n",
    "       'statezip', 'country']\n",
    "\n",
    "original_df = df.drop(columns = columns_to_remove)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1e3ec3a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.183972Z",
     "iopub.status.busy": "2025-07-26T16:32:23.183689Z",
     "iopub.status.idle": "2025-07-26T16:32:23.188219Z",
     "shell.execute_reply": "2025-07-26T16:32:23.187590Z"
    },
    "papermill": {
     "duration": 0.009314,
     "end_time": "2025-07-26T16:32:23.189293",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.179979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors',\n",
       "       'view', 'sqft_above'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "792ddc0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.196337Z",
     "iopub.status.busy": "2025-07-26T16:32:23.196102Z",
     "iopub.status.idle": "2025-07-26T16:32:23.200583Z",
     "shell.execute_reply": "2025-07-26T16:32:23.199680Z"
    },
    "papermill": {
     "duration": 0.009343,
     "end_time": "2025-07-26T16:32:23.201910",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.192567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4600, 8)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1e004ba8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.209321Z",
     "iopub.status.busy": "2025-07-26T16:32:23.209111Z",
     "iopub.status.idle": "2025-07-26T16:32:23.230455Z",
     "shell.execute_reply": "2025-07-26T16:32:23.229611Z"
    },
    "papermill": {
     "duration": 0.026678,
     "end_time": "2025-07-26T16:32:23.231937",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.205259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size before removing outliers: (4600, 8)\n",
      "Size after removing outliers: (3463, 8)\n"
     ]
    }
   ],
   "source": [
    "# remove using IQR method\n",
    "n = original_df.shape[0]\n",
    "Q1 = original_df.quantile(0.25)\n",
    "Q3 = original_df.quantile(0.75)\n",
    "\n",
    "\n",
    "# Calculate the IQR (Interquartile Range) for each column\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Define the lower and upper bounds for outliers\n",
    "lower_bound = Q1 - 1.5 * IQR\n",
    "upper_bound = Q3 + 1.5 * IQR\n",
    "\n",
    "# Remove rows that contain outliers\n",
    "# Since you applied ~, it selects only the rows where none of the values are outliers (i.e., the rows \n",
    "# that don’t contain any values greater than the upper bound or less than the lower bound).\n",
    "df_cleaned = original_df[~((original_df < lower_bound) | (original_df > upper_bound)).any(axis=1)]\n",
    "\n",
    "print(\"Size before removing outliers:\", original_df.shape)\n",
    "print(\"Size after removing outliers:\", df_cleaned.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f0892759",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.240335Z",
     "iopub.status.busy": "2025-07-26T16:32:23.240114Z",
     "iopub.status.idle": "2025-07-26T16:32:23.246243Z",
     "shell.execute_reply": "2025-07-26T16:32:23.245371Z"
    },
    "papermill": {
     "duration": 0.011542,
     "end_time": "2025-07-26T16:32:23.247439",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.235897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x = np.array(df_cleaned.drop(columns = ['price']))\n",
    "y = np.array(df_cleaned['price'])\n",
    "\n",
    "x_mean = np.mean(x)\n",
    "std_x = np.std(x)\n",
    "\n",
    "# Check if std_x is not equal to zero before dividing\n",
    "if std_x != 0:\n",
    "    x_norm = (x - x_mean) / std_x\n",
    "else:\n",
    "    print(\"Standard deviation is zero, skipping normalization.\")\n",
    "    x_norm = x \n",
    "\n",
    "y_mean = y.mean(axis=0)\n",
    "std_y = y.std(axis=0)\n",
    "y_norm = (y - y_mean) / std_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9d75e3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.254956Z",
     "iopub.status.busy": "2025-07-26T16:32:23.254749Z",
     "iopub.status.idle": "2025-07-26T16:32:23.257596Z",
     "shell.execute_reply": "2025-07-26T16:32:23.256945Z"
    },
    "papermill": {
     "duration": 0.007978,
     "end_time": "2025-07-26T16:32:23.258783",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.250805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def compute_cost(w, x, y, b):\n",
    "#     m = len(x)\n",
    "#     # formula = 1 / 2m ∑ (predicted - actual) ** 2\n",
    "#     total_cost = 0\n",
    "#     for i in range(m):\n",
    "#         prediction = np.dot(w, x[i]) + b\n",
    "#         total_cost += (prediction - y[i]) ** 2\n",
    "#     total_cost = total_cost / (2 * m)\n",
    "    \n",
    "#     # should be scalar output\n",
    "#     return total_cost "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "95d8bf00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.266055Z",
     "iopub.status.busy": "2025-07-26T16:32:23.265845Z",
     "iopub.status.idle": "2025-07-26T16:32:23.269963Z",
     "shell.execute_reply": "2025-07-26T16:32:23.269359Z"
    },
    "papermill": {
     "duration": 0.009039,
     "end_time": "2025-07-26T16:32:23.271186",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.262147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def compute_cost(w, x, y, b, lamda):\n",
    "    m = len(x)\n",
    "    # formula = 1 / 2m ∑ (predicted - actual) ** 2\n",
    "    total_cost = 0\n",
    "    for i in range(m):\n",
    "        prediction = np.dot(w, x[i]) + b\n",
    "        total_cost += (prediction - y[i]) ** 2\n",
    "    total_cost = total_cost / (2 * m)\n",
    "    \n",
    "    # should be scalar output\n",
    "    reg = 0\n",
    "    n = len(w)\n",
    "    for j in range(n):\n",
    "        reg += w[j] ** 2\n",
    "\n",
    "    reg = lamda / (2 * m) * reg\n",
    "\n",
    "    return total_cost + reg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0bee9744",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.278342Z",
     "iopub.status.busy": "2025-07-26T16:32:23.278106Z",
     "iopub.status.idle": "2025-07-26T16:32:23.282292Z",
     "shell.execute_reply": "2025-07-26T16:32:23.281442Z"
    },
    "papermill": {
     "duration": 0.00899,
     "end_time": "2025-07-26T16:32:23.283488",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.274498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def compute_gradient(w, x, y, b):\n",
    "\n",
    "    # formula = w  - alpha (dj / dw) * x\n",
    "    # b = b - alpha (db / db)\n",
    "    m = len(x)\n",
    "    dw = np.zeros_like(w)\n",
    "    db = 0\n",
    "\n",
    "    for i in range(m):\n",
    "        prediction = np.dot(w, x[i]) + b\n",
    "        dw += (prediction -  y[i]) * x[i]\n",
    "        db += (prediction -  y[i])\n",
    "\n",
    "        \n",
    "    dw /= m\n",
    "    db /= m\n",
    "\n",
    "    return dw, db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3382a629",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:23.290917Z",
     "iopub.status.busy": "2025-07-26T16:32:23.290691Z",
     "iopub.status.idle": "2025-07-26T16:32:41.104278Z",
     "shell.execute_reply": "2025-07-26T16:32:41.103276Z"
    },
    "papermill": {
     "duration": 17.818948,
     "end_time": "2025-07-26T16:32:41.105798",
     "exception": false,
     "start_time": "2025-07-26T16:32:23.286850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prev 1.78210848274914\n",
      "Iteration    0: Cost 1.765535   \n",
      "Iteration  100: Cost 0.906605   \n",
      "Iteration  200: Cost 0.708014   \n",
      "Iteration  300: Cost 0.658707   \n",
      "Iteration  400: Cost 0.643219   \n",
      "Iteration  500: Cost 0.635457   \n",
      "Iteration  600: Cost 0.629526   \n",
      "Iteration  700: Cost 0.624091   \n",
      "Iteration  800: Cost 0.618849   \n",
      "Iteration  900: Cost 0.613730   \n",
      "w found by gradient descent: [-0.05220534 -1.03176169 -0.95016711  0.02182314 -0.09123494  1.88807606\n",
      "  0.31732075]\n",
      "b found :  0.4444390982803871\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "def gradient_descent(alpha, w, x, b, y,iterations):\n",
    "    # formula = w  - alpha (dj / dw) * x\n",
    "    # b = b - alpha (dj / db)\n",
    "\n",
    "    J = []\n",
    "    # cost function output should be scalar\n",
    "    prev_cost=compute_cost(w,x,y,b, 0.7)\n",
    "    print(\"prev\", prev_cost)\n",
    "    for i in range(iterations):\n",
    "\n",
    "        dw, db = compute_gradient(w, x, y, b)\n",
    "\n",
    "        w = w - alpha * dw\n",
    "        b = b - alpha * db\n",
    "        curr_cost=compute_cost(w,x,y,b, 0.7)\n",
    "        if i % 100 == 0 :\n",
    "            J.append(curr_cost)\n",
    "            print(f\"Iteration {i:4}: Cost {(J[-1]):8.6f}   \")\n",
    "        if(abs(prev_cost-curr_cost)<1e-7):\n",
    "            break\n",
    "        prev_cost=curr_cost\n",
    "    return w,b, J\n",
    "\n",
    "initial_w = np.random.randn(7)\n",
    "initial_b = 0.25\n",
    "alpha = 0.001\n",
    "w,b,cost = gradient_descent(alpha, initial_w, x_norm, initial_b, y_norm, \n",
    "                     1000)\n",
    "\n",
    "# we have 6 features, so 6 weights and bias\n",
    "print(\"w found by gradient descent:\", w)\n",
    "print(\"b found : \", b)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8b82e6e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:41.115371Z",
     "iopub.status.busy": "2025-07-26T16:32:41.115107Z",
     "iopub.status.idle": "2025-07-26T16:32:41.370758Z",
     "shell.execute_reply": "2025-07-26T16:32:41.369867Z"
    },
    "papermill": {
     "duration": 0.261797,
     "end_time": "2025-07-26T16:32:41.372055",
     "exception": false,
     "start_time": "2025-07-26T16:32:41.110258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cost)\n",
    "plt.xlabel('Iterations')\n",
    "plt.ylabel('cost')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c7f2aec8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:41.381368Z",
     "iopub.status.busy": "2025-07-26T16:32:41.381125Z",
     "iopub.status.idle": "2025-07-26T16:32:41.386393Z",
     "shell.execute_reply": "2025-07-26T16:32:41.385625Z"
    },
    "papermill": {
     "duration": 0.011217,
     "end_time": "2025-07-26T16:32:41.387653",
     "exception": false,
     "start_time": "2025-07-26T16:32:41.376436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'view',\n",
      "       'sqft_above'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "feature_names = original_df.drop(columns=['price']).columns\n",
    "print(feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "964d2b8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:41.396873Z",
     "iopub.status.busy": "2025-07-26T16:32:41.396650Z",
     "iopub.status.idle": "2025-07-26T16:32:41.401595Z",
     "shell.execute_reply": "2025-07-26T16:32:41.400640Z"
    },
    "papermill": {
     "duration": 0.011017,
     "end_time": "2025-07-26T16:32:41.402833",
     "exception": false,
     "start_time": "2025-07-26T16:32:41.391816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Normalized new data: [-0.54365013 -0.54435998  0.10088911  1.22954262 -0.54435998 -0.5447149\n",
      "  0.03700306]\n",
      "Predicted price: 198520.2557132668\n"
     ]
    }
   ],
   "source": [
    "# New data (before normalization)\n",
    "new_data = np.array([4, 2, 1820, 5000, 2, 1, 1640])\n",
    "\n",
    "# Normalize the new data using the same max values as the training data\n",
    "\n",
    "new_norm = (new_data - x_mean) / std_x  # Use max values from training data for consistency\n",
    "\n",
    "print(\"Normalized new data:\", new_norm)\n",
    "\n",
    "# Now make the prediction using the normalized new data\n",
    "predicted_price = np.dot(w, new_norm) + b\n",
    "print(f\"Predicted price: {predicted_price * y_mean + std_y}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4bb83a74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:41.411996Z",
     "iopub.status.busy": "2025-07-26T16:32:41.411777Z",
     "iopub.status.idle": "2025-07-26T16:32:41.416125Z",
     "shell.execute_reply": "2025-07-26T16:32:41.415474Z"
    },
    "papermill": {
     "duration": 0.010184,
     "end_time": "2025-07-26T16:32:41.417285",
     "exception": false,
     "start_time": "2025-07-26T16:32:41.407101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now the actual and predicted price are different\n",
    "\n",
    "#  We are going to use regularization method\n",
    "\n",
    "# formula  = lambda / 2m ∑ (wj **2)\n",
    "\n",
    "def compute_cost(w, x, y, b, lamda):\n",
    "    m = len(x)\n",
    "    # formula = 1 / 2m ∑ (predicted - actual) ** 2\n",
    "    total_cost = 0\n",
    "    for i in range(m):\n",
    "        prediction = np.dot(w, x[i]) + b\n",
    "        total_cost += (prediction - y[i]) ** 2\n",
    "    total_cost = total_cost / (2 * m)\n",
    "    \n",
    "    # should be scalar output\n",
    "    reg = 0\n",
    "    for j in range(m):\n",
    "        reg += w[j] ** 2\n",
    "\n",
    "    reg = lamda / (2 * m) * reg\n",
    "\n",
    "    return totalcost + reg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1e258c4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-26T16:32:41.426454Z",
     "iopub.status.busy": "2025-07-26T16:32:41.426257Z",
     "iopub.status.idle": "2025-07-26T16:32:41.429154Z",
     "shell.execute_reply": "2025-07-26T16:32:41.428491Z"
    },
    "papermill": {
     "duration": 0.008773,
     "end_time": "2025-07-26T16:32:41.430338",
     "exception": false,
     "start_time": "2025-07-26T16:32:41.421565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now how will you choose perfect lambda ? \n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6572246,
     "sourceId": 10615535,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30840,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 22.783916,
   "end_time": "2025-07-26T16:32:41.952324",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-26T16:32:19.168408",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
